{"version":3,"file":"Screenshot.js","sourceRoot":"","sources":["Screenshot.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAW/B,MAAa,UAAW,SAAQ,KAAK,CAAC,SAA2C;IAI7E,YAAY,KAAK;QACb,KAAK,CAAC,KAAK,CAAC,CAAC;QAWjB,uBAAkB,GAAG,GAAG,EAAE;YAEtB,IAAI,QAAQ,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;YAElC,IAAI,QAAQ,EAAE;gBACV,KAAK,IAAI,UAAU,IAAI,UAAU,CAAC,qBAAqB,EAAE;oBACrD,UAAU,CAAC,QAAQ,CAAC;wBAChB,MAAM,EAAE,KAAK;qBAChB,CAAC,CAAC;iBACN;aACJ;YAED,IAAI,CAAC,QAAQ,CAAC;gBACV,MAAM,EAAE,QAAQ;aACnB,CAAC,CAAC;QACP,CAAC,CAAC;QAzBE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAEhB,0BAA0B;QAC1B,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,oBAAoB;IAEpB,CAAC;IAmBD,eAAe;QACX,OAAO,6BAAK,SAAS,EAAC,sBAAsB,EAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,IACxE,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,oBAAC,KAAK,CAAC,QAAQ,iBAAwB,CAClE,CAAA;IACV,CAAC;IAED,UAAU;QACN,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YAC5C,OAAO,IAAI,CAAC;SACf;QAED,OAAO,6BAAK,SAAS,EAAC,2BAA2B;YAC7C,6BAAK,SAAS,EAAC,iBAAiB,IAC3B,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,oBAAC,KAAK,CAAC,QAAQ,iBAAwB,CAC7D,CACJ,CAAA;IACV,CAAC;IAED,MAAM;QACF,OAAO,6BAAK,SAAS,EAAE,sBAAsB,EACjC,OAAO,EAAE,IAAI,CAAC,kBAAkB;YACvC,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,CAAC,UAAU,EAAE,CAChB,CAAC;IACX,CAAC;;AAvDM,gCAAqB,GAAiB,EAAE,CAAC;AAFpD,gCA0DC","sourcesContent":["import * as React from \"react\";\n\nexport interface ScreenshotProps {\n    thumbnailView?: React.ReactElement;\n    fullView?: React.ReactElement;\n}\n\nexport interface ScreenshotState {\n    active?: boolean;\n}\n\nexport class Screenshot extends React.Component<ScreenshotProps, ScreenshotState> {\n\n    static SCREENSHOT_COMPONENTS: Screenshot[] = [];\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n\n        // TODO: Remove on destroy\n        Screenshot.SCREENSHOT_COMPONENTS.push(this);\n    }\n\n    componentWillUnmount(): void {\n\n    }\n\n    handleToggleActive = () => {\n\n        let isActive = !this.state.active;\n\n        if (isActive) {\n            for (let screenshot of Screenshot.SCREENSHOT_COMPONENTS) {\n                screenshot.setState({\n                    active: false\n                });\n            }\n        }\n\n        this.setState({\n            active: isActive\n        });\n    };\n\n    renderThumbnail() {\n        return <div className=\"screenshot-thumbanil\" onClick={this.handleToggleActive}>\n            {this.props.thumbnailView || <React.Fragment>&nbsp;</React.Fragment>}\n        </div>\n    }\n\n    renderFull() {\n        if (!this.state.active || !this.props.fullView) {\n            return null;\n        }\n\n        return <div className=\"screenshot-full-container\">\n            <div className=\"screenshot-full\">\n                {this.props.fullView || <React.Fragment>&nbsp;</React.Fragment>}\n            </div>\n        </div>\n    }\n\n    render() {\n        return <div className={\"screenshot-container\"}\n                    onClick={this.handleToggleActive}>\n            {this.renderThumbnail()}\n            {this.renderFull()}\n        </div>;\n    }\n}"]}