{"version":3,"file":"Waveform.js","sourceRoot":"","sources":["Waveform.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,mCAAqC;AAErC,MAAM,YAAY;IAKd,YAAY,OAAc;QAD1B,YAAO,GAAG,CAAC,CAAC;QAGR,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA0FG;IAEH,IAAI,CAAC,GAA4B,EAAE,cAAqB,EAAE,EAAS,EAAE,EAAS;QAE1E,GAAG,CAAC,SAAS,EAAE,CAAC;QAEhB,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,YAAY,CAAC,gBAAgB,EAAE,CAAC,IAAI,YAAY,CAAC,gBAAgB,EAAE;YACzF,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,GAAG,eAAM,CAAC,CAAC,cAAc,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;SAC/E;QAED,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QAC3B,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QAEvB,GAAG,CAAC,SAAS,EAAE,CAAC;QAChB,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,GAAG,CAAC,MAAM,EAAE,CAAC;IACjB,CAAC;;AApHM,6BAAgB,GAAG,CAAC,CAAC;AA0HhC,MAAa,QAAS,SAAQ,KAAK,CAAC,aAA4B;IAI5D,YAAY,KAAK;QACb,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;IAC3C,CAAC;IAED,iBAAiB;QACb,sBAAsB;IAC1B,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAiPG;IAEH,MAAM;QACF,OAAO,gCAAQ,GAAG,EAAE,IAAI,CAAC,aAAa,EAAE,SAAS,EAAC,UAAU,GAAE,CAAC;IACnE,CAAC;CACJ;AAnQD,4BAmQC","sourcesContent":["import * as React from \"react\";\nimport {random, clamp} from \"lodash\";\n\nclass WaveformLine\n{\n    static HORIZ_RESOLUTION = 5;\n\n    yOffset = 0;\n    constructor(yOffset:number)\n    {\n        this.yOffset = yOffset;\n    }\n\n    /*static map(n, a, b, _a, _b) {\n        var d = b - a;\n        var _d = _b - _a;\n        var u = _d / d;\n        return _a + (n - a) * u;\n    }\n\n    static PERLIN_YWRAPB = 4;\n    static PERLIN_YWRAP = 1<<WaveformLine.PERLIN_YWRAPB;\n    static PERLIN_ZWRAPB = 8;\n    static PERLIN_ZWRAP = 1<<WaveformLine.PERLIN_ZWRAPB;\n    static PERLIN_SIZE = 4095;\n\n    static scaled_cosine(i) {\n        return 0.5*(1.0-Math.cos(i*Math.PI));\n    };\n\n    static perlin_octaves = 4; // default to medium smooth\n    static perlin_amp_falloff = 0.5; // 50% reduction/octave\n    static perlin;\n\n    static noiseDetail(lod, falloff) {\n        // Adjusts the character and level of detail produced by the Perlin noise\n        // By default, noise is computed over 4 octaves\n        // https://p5js.org/reference/#/p5/noiseDetail\n        if (lod>0)     { WaveformLine.perlin_octaves=lod; }\n        if (falloff>0) { WaveformLine.perlin_amp_falloff=falloff; }\n    }\n\n    static noise(x,y,z) {\n        y = y || 0;\n        z = z || 0;\n\n        if (WaveformLine.perlin == null) {\n            WaveformLine.perlin = new Array(WaveformLine.PERLIN_SIZE + 1);\n            for (var i = 0; i < WaveformLine.PERLIN_SIZE + 1; i++) {\n                WaveformLine.perlin[i] = Math.random();\n            }\n        }\n\n        if (x<0) { x=-x; }\n        if (y<0) { y=-y; }\n        if (z<0) { z=-z; }\n\n        var xi=Math.floor(x), yi=Math.floor(y), zi=Math.floor(z);\n        var xf = x - xi;\n        var yf = y - yi;\n        var zf = z - zi;\n        var rxf, ryf;\n\n        var r=0;\n        var ampl=0.5;\n\n        var n1,n2,n3;\n\n        for (var o=0; o<WaveformLine.perlin_octaves; o++) {\n            var of=xi+(yi<<WaveformLine.PERLIN_YWRAPB)+(zi<<WaveformLine.PERLIN_ZWRAPB);\n\n            rxf = WaveformLine.scaled_cosine(xf);\n            ryf = WaveformLine.scaled_cosine(yf);\n\n            n1  = WaveformLine.perlin[of&WaveformLine.PERLIN_SIZE];\n            n1 += rxf*(WaveformLine.perlin[(of+1)&WaveformLine.PERLIN_SIZE]-n1);\n            n2  = WaveformLine.perlin[(of+WaveformLine.PERLIN_YWRAP)&WaveformLine.PERLIN_SIZE];\n            n2 += rxf*(WaveformLine.perlin[(of+WaveformLine.PERLIN_YWRAP+1)&WaveformLine.PERLIN_SIZE]-n2);\n            n1 += ryf*(n2-n1);\n\n            of += WaveformLine.PERLIN_ZWRAP;\n            n2  = WaveformLine.perlin[of&WaveformLine.PERLIN_SIZE];\n            n2 += rxf*(WaveformLine.perlin[(of+1)&WaveformLine.PERLIN_SIZE]-n2);\n            n3  = WaveformLine.perlin[(of+WaveformLine.PERLIN_YWRAP)&WaveformLine.PERLIN_SIZE];\n            n3 += rxf*(WaveformLine.perlin[(of+WaveformLine.PERLIN_YWRAP+1)&WaveformLine.PERLIN_SIZE]-n3);\n            n2 += ryf*(n3-n2);\n\n            n1 += WaveformLine.scaled_cosine(zf)*(n2-n1);\n\n            r += n1*ampl;\n            ampl *= WaveformLine.perlin_amp_falloff;\n            xi<<=1;\n            xf*=2;\n            yi<<=1;\n            yf*=2;\n            zi<<=1;\n            zf*=2;\n\n            if (xf>=1.0) { xi++; xf--; }\n            if (yf>=1.0) { yi++; yf--; }\n            if (zf>=1.0) { zi++; zf--; }\n        }\n        return r;\n    }*/\n\n    draw(ctx:CanvasRenderingContext2D, noiseAmplitude:number, cw:number, ch:number)\n    {\n        ctx.beginPath();\n\n        ctx.moveTo(-2, this.yOffset);\n\n        for (let x = -2; x < cw + WaveformLine.HORIZ_RESOLUTION; x += WaveformLine.HORIZ_RESOLUTION) {\n            ctx.lineTo(x, this.yOffset + random(-noiseAmplitude, noiseAmplitude, true));\n        }\n\n        ctx.lineTo(cw + 2, ch + 2);\n        ctx.lineTo(-2, ch + 2);\n\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n    }\n}\n\nexport interface WaveformProps {\n}\n\nexport class Waveform extends React.PureComponent<WaveformProps> {\n\n    canvasElement;\n\n    constructor(props) {\n        super(props);\n        this.canvasElement = React.createRef();\n    }\n\n    componentDidMount(): void {\n        //this.drawWaveform();\n    }\n\n    /*drawWaveform()\n    {\n        (function() {\n            var lastTime = 0;\n            var vendors = ['ms', 'moz', 'webkit', 'o'];\n            for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n                window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];\n                window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']\n                    || window[vendors[x]+'CancelRequestAnimationFrame'];\n            }\n\n            if (!window.requestAnimationFrame)\n                // @ts-ignore\n                window.requestAnimationFrame = function(callback, element) {\n                    var currTime = new Date().getTime();\n                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n                    var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n                        timeToCall);\n                    lastTime = currTime + timeToCall;\n                    return id;\n                };\n\n            if (!window.cancelAnimationFrame)\n                window.cancelAnimationFrame = function(id) {\n                    clearTimeout(id);\n                };\n        }());\n\n        var PERLIN_YWRAPB = 4;\n        var PERLIN_YWRAP = 1<<PERLIN_YWRAPB;\n        var PERLIN_ZWRAPB = 8;\n        var PERLIN_ZWRAP = 1<<PERLIN_ZWRAPB;\n        var PERLIN_SIZE = 4095;\n\n        var perlin_octaves = 4; // default to medium smooth\n        var perlin_amp_falloff = 0.5; // 50% reduction/octave\n\n        var scaled_cosine = function(i) {\n            return 0.5*(1.0-Math.cos(i*Math.PI));\n\n\n        };\n\n        var perlin; // will be initialized lazily by noise() or noiseSeed()\n\n\n\n        function noise(x,y,z) {\n            y = y || 0;\n            z = z || 0;\n\n            if (perlin == null) {\n                perlin = new Array(PERLIN_SIZE + 1);\n                for (var i = 0; i < PERLIN_SIZE + 1; i++) {\n                    perlin[i] = Math.random();\n                }\n            }\n\n            if (x<0) { x=-x; }\n            if (y<0) { y=-y; }\n            if (z<0) { z=-z; }\n\n            var xi=Math.floor(x), yi=Math.floor(y), zi=Math.floor(z);\n            var xf = x - xi;\n            var yf = y - yi;\n            var zf = z - zi;\n            var rxf, ryf;\n\n            var r=0;\n            var ampl=0.5;\n\n            var n1,n2,n3;\n\n            for (var o=0; o<perlin_octaves; o++) {\n                var of=xi+(yi<<PERLIN_YWRAPB)+(zi<<PERLIN_ZWRAPB);\n\n                rxf = scaled_cosine(xf);\n                ryf = scaled_cosine(yf);\n\n                n1  = perlin[of&PERLIN_SIZE];\n                n1 += rxf*(perlin[(of+1)&PERLIN_SIZE]-n1);\n                n2  = perlin[(of+PERLIN_YWRAP)&PERLIN_SIZE];\n                n2 += rxf*(perlin[(of+PERLIN_YWRAP+1)&PERLIN_SIZE]-n2);\n                n1 += ryf*(n2-n1);\n\n                of += PERLIN_ZWRAP;\n                n2  = perlin[of&PERLIN_SIZE];\n                n2 += rxf*(perlin[(of+1)&PERLIN_SIZE]-n2);\n                n3  = perlin[(of+PERLIN_YWRAP)&PERLIN_SIZE];\n                n3 += rxf*(perlin[(of+PERLIN_YWRAP+1)&PERLIN_SIZE]-n3);\n                n2 += ryf*(n3-n2);\n\n                n1 += scaled_cosine(zf)*(n2-n1);\n\n                r += n1*ampl;\n                ampl *= perlin_amp_falloff;\n                xi<<=1;\n                xf*=2;\n                yi<<=1;\n                yf*=2;\n                zi<<=1;\n                zf*=2;\n\n                if (xf>=1.0) { xi++; xf--; }\n                if (yf>=1.0) { yi++; yf--; }\n                if (zf>=1.0) { zi++; zf--; }\n            }\n            return r;\n        };\n\n        function noiseDetail(lod, falloff) {\n            // Adjusts the character and level of detail produced by the Perlin noise\n            // By default, noise is computed over 4 octaves\n            // https://p5js.org/reference/#/p5/noiseDetail\n            if (lod>0)     { perlin_octaves=lod; }\n            if (falloff>0) { perlin_amp_falloff=falloff; }\n        };\n\n\n        function noiseSeed(seed) {\n            // Linear Congruential Generator\n            // Variant of a Lehman Generator\n            var lcg = (function() {\n                // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n                // m is basically chosen to be large (as it is the max period)\n                // and for its relationships to a and c\n                var m = 4294967296,\n                    // a - 1 should be divisible by m's prime factors\n                    a = 1664525,\n                    // c and m should be co-prime\n                    c = 1013904223,\n                    seed, z;\n                return {\n                    setSeed : function(val) {\n                        // pick a random seed if val is undefined or null\n                        // the >>> 0 casts the seed to an unsigned 32-bit integer\n                        z = seed = (val == null ? Math.random() * m : val) >>> 0;\n                    },\n                    getSeed : function() {\n                        return seed;\n                    },\n                    rand : function() {\n                        // define the recurrence relationship\n                        z = (a * z + c) % m;\n                        // return a float in [0, 1)\n                        // if z = m then z / m = 0 therefore (z % m) / m < 1 always\n                        return z / m;\n                    }\n                };\n            }());\n\n            lcg.setSeed(seed);\n            perlin = new Array(PERLIN_SIZE + 1);\n            for (var i = 0; i < PERLIN_SIZE + 1; i++) {\n                perlin[i] = lcg.rand();\n            }\n        };\n\n        let canvas = this.canvasElement.current;\n\n        var ctx = canvas.getContext(\"2d\");\n        var c = {}\n        var cw = canvas.width = 450;\n        c.x = cw / 2;\n        var ch = canvas.height = window.outerHeight;\n        c.y = ch / 2;\n        ctx.lineJoin = \"round\";\n        ctx.strokeStyle = \"#CCC\";\n        ctx.fillStyle = \"#FFFFFF\";\n        var rad = Math.PI / 180;\n        var x, y;\n\n        var amplitude = 5;\n        var frequency = .02;\n        var phi = 0;\n\n        var increment = 0.05;\n        var lines = [];\n\n        function SquigglyLine(y) {\n            this.y = y;\n            this.xoff = Math.random() * 10000;\n            this.Xoff = this.xoff;\n            this.phi = Math.random() * 10000;\n            this.draw = function(i) {\n                ctx.beginPath();\n\n                this.xoff = this.Xoff; // reset xoff;\n\n                for (var x = -2; x < cw + 2; x++) {\n\n                    if (x > cw / 3 && x < 2 * cw / 3) {\n                        var k = map(x, cw / 3, 2 * cw / 3, 0, 180);\n                    } else {\n                        k = 0;\n                    }\n\n                    var y = -Math.abs(Math.sin((x + noise(this.xoff) * 100) * frequency + this.phi) * (amplitude + Math.sin(k * rad) * 50)) + this.y;\n\n                    ctx.lineTo(x, y);\n\n                    this.xoff += increment;\n\n                }\n                ctx.lineTo(cw + 2, ch + 2);\n                ctx.lineTo(-2, ch + 2);\n                ctx.closePath();\n                ctx.fill();\n                ctx.stroke();\n\n            }\n        }\n\n        for (var y = 60; y < ch; y += 16) {\n\n            var line = new SquigglyLine(y);\n            lines.push(line);\n\n        }\n\n        function Draw() {\n            requestId = window.requestAnimationFrame(Draw);\n            ctx.fillRect(0, 0, cw, ch);\n\n            noiseDetail(2, .5);\n\n            for (var i = 0; i < lines.length; i++) {\n                lines[i].phi += 1 / 30;\n                lines[i].draw(i);\n            }\n\n        }\n\n        let requestId = window.requestAnimationFrame(Draw);\n\n        function map(n, a, b, _a, _b) {\n            var d = b - a;\n            var _d = _b - _a;\n            var u = _d / d;\n            return _a + (n - a) * u;\n        }\n    }*/\n\n    render() {\n        return <canvas ref={this.canvasElement} className=\"waveform\"/>;\n    }\n}"]}